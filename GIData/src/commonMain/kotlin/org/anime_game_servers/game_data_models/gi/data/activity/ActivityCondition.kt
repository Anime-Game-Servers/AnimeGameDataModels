package org.anime_game_servers.game_data_models.gi.data.activity

import org.anime_game_servers.core.base.interfaces.IntKey

/**
 * This enum contains all types of conditions that can be used by an [ActivityCondData.ActivityConfigCondition].
 * They can either return true for valid or false for invalid.
 * @property id The int representation of this enum
 */
enum class ActivityCondition(val id: Int) : IntKey {
    NEW_ACTIVITY_COND_NONE(0),
    /**
     * Checks if the activity is open for more than a certain amount of days already
     * param [0]: number of days since the opening of the activity
     */
    NEW_ACTIVITY_COND_TIME_GREATER(1),
    /**
     * Checks if the activity is open for less than a certain amount of days already
     * param [0]: number of days since the opening of the activity
     */
    NEW_ACTIVITY_COND_TIME_LESS(2),
    /**
     * Checks if the players level/Adventure Rank is greater than a certain amount
     * param [0]: the level to check
     */
    NEW_ACTIVITY_COND_PLAYER_LEVEL_GREATER(3),
    /**
     * Checks if the has already completed a certain quest
     * param [0]: the subQuestId to check
     */
    NEW_ACTIVITY_COND_QUEST_FINISH(4),

    /**
     * Checks if the player has already completed a certain talk (currently unused)
     * param [0]: the talkId to check
     */
    NEW_ACTIVITY_COND_FINISH_TALK(5),
    /**
     * Checks if specific npcs are already active
     * param [%2==0]: the group the npcs is a part of
     * param [%2==1]: the id of the npc
     */
    NEW_ACTIVITY_COND_CREATE_NPC(6),
    /**
     * Checks if the player has not yet completed a certain talk
     * param [0]: the talkId to check
     */
    NEW_ACTIVITY_COND_NOT_FINISH_TALK(7),
    NEW_ACTIVITY_COND_SALESMAN_CAN_DELIVER(8),
    NEW_ACTIVITY_COND_SALESMAN_CAN_GET_REWARD(9),
    NEW_ACTIVITY_COND_ASTER_MID_CAMP_REFRESHABLE(10),
    /**
     * Checks if certain watchers are completed
     * param: list of watcher ids to check
     */
    NEW_ACTIVITY_COND_FINISH_WATCHER(11),
    /**
     * Checks if the amount of days since the start of the day is greater or equal to a certain amount
     * param [0]: days since the start of the day
     */
    NEW_ACTIVITY_COND_DAYS_GREAT_EQUAL(12),
    /**
     * Checks if the amount of days since the start of the day is less than a certain amount
     * param [0]: days since the start of the day
     */
    NEW_ACTIVITY_COND_DAYS_LESS(13),
    /**
     * Checks if the players level/Adventure Rank is at least a certain amount
     * param [0]: the level to check
     */
    NEW_ACTIVITY_COND_PLAYER_LEVEL_GREAT_EQUAL(14),
    NEW_ACTIVITY_COND_SCENE_MP_PLAY_ACTIVATED(15),
    NEW_ACTIVITY_COND_SEA_LAMP_POPULARIT(16),
    NEW_ACTIVITY_COND_SEA_LAMP_PHASE(17),
    NEW_ACTIVITY_COND_MECHANICUS_OPEN(18),
    NEW_ACTIVITY_COND_FINISH_REGION_SEARCH_LOGIC(19),
    NEW_ACTIVITY_COND_FINISH_REGION_SEARCH(20),
    NEW_ACTIVITY_COND_FINISH_WATER_SPIRIT_PHASE(21),
    NEW_ACTIVITY_COND_FINISH_FIND_HILICHURL_LEVEL_EQUAL(22),
    NEW_ACTIVITY_COND_FINISH_FIND_HILICHURL_LEVEL_LESS(23),
    NEW_ACTIVITY_COND_FINISH_CHANNELLER_SLAB_ONEOFF_DUNGEON_IN_STAGE(24),
    NEW_ACTIVITY_COND_FINISH_CHANNELLER_SLAB_ANY_ONEOFF_DUNGEON(25),
    NEW_ACTIVITY_COND_SEPCIFIED_ACTIVITY_END(26),
    /**
     * Checks if the player has unlocked certain scene points
     * param: list of scene point ids to check for
     */
    NEW_ACTIVITY_COND_UNLOCKED_ALL_LISTED_SCENE_POINTS(27),
    NEW_ACTIVITY_COND_TREASURE_MAP_BONUS_SPOT_GOT_ANY_FRAGMENT(28),
    NEW_ACTIVITY_COND_ITEM_COUNT_GREATER(29),
    /**
     * Checks if a global quest variable is greater than a certain amount
     * param [0]: the global variable to check
     * param [1]: the value to check against
     */
    NEW_ACTIVITY_COND_QUEST_GLOBAL_VAR_GREATER(30),
    /**
     * Checks if a global quest variable is less than a certain amount
     * param [0]: the global variable to check
     * param [1]: the value to check against
     */
    NEW_ACTIVITY_COND_QUEST_GLOBAL_VAR_LESS(31),
    /**
     * Checks if a global quest variable is equal to a certain amount
     * param [0]: the global variable to check
     * param [1]: the value to check against
     */
    NEW_ACTIVITY_COND_QUEST_GLOBAL_VAR_EQUAL(32),
    NEW_ACTIVITY_COND_FINISH_DIG_ACTIVITY(33),
    NEW_ACTIVITY_COND_GROUP_BUNDLE_FINISHED(34),
    NEW_ACTIVITY_COND_PLANT_FLOWER_CAN_DELIVER(35),
    NEW_ACTIVITY_COND_LUNA_RITE_ATMOSPHERE(36),
    NEW_ACTIVITY_COND_FINISH_HACHI_STAGE(37),
    NEW_ACTIVITY_COND_FINISH_CHANNELLER_SLAB_ANY_STAGE_ALL_CAMP(38),
    NEW_ACTIVITY_COND_FINISH_CHANNELLER_SLAB_APPOINTED_STAGE_ALL_CAMP(39),
    NEW_ACTIVITY_COND_HACHI_FINISH_STEALTH_STAGE_EQUAL(40),
    NEW_ACTIVITY_COND_HACHI_FINISH_BATTLE_STAGE_EQUAL(41),
    NEW_ACTIVITY_COND_FINISH_SALVAGE_STAGE(42),
    NEW_ACTIVITY_COND_FINISH_BARTENDER_LEVEL(43),
    NEW_ACTIVITY_COND_FINISH_POTION_ANY_LEVEL(44),
    NEW_ACTIVITY_COND_FINISH_CUSTOM_DUNGEON_OFFICIAL(45),
    NEW_ACTIVITY_COND_QUEST_FINISH_ALLOW_QUICK_OPEN(46),
    NEW_ACTIVITY_COND_FINISH_PHOTO_POS_ID(47),
    /**
     * Checks if the player has completed all music game levels from the current activity
     * no params
     */
    NEW_ACTIVITY_COND_FINISH_MUSIC_GAME_ALL_LEVEL(48),
    NEW_ACTIVITY_COND_CURRENT_LUMINANCE_STONE_CHALLENGE_STAGE(49),
    NEW_ACTIVITY_COND_LUMINANCE_STONE_CHALLENGE_FINAL_GALLERY_COMPLETE(50),
    NEW_ACTIVITY_COND_OFFERING_LEVEL_GREAT_EQUAL(51),
    NEW_ACTIVITY_COND_LUMINANCE_STONE_CHALLENGE_STAGE_GREAT_EQUAL(52),
    NEW_ACTIVITY_COND_FINISH_ANY_ARENA_CHALLENGE_LEVEL(53),
    NEW_ACTIVITY_COND_GACHA_CAN_CREATE_ROBOT(54),
    NEW_ACTIVITY_COND_FINISH_ANY_INSTABLE_SPRAY_CHALLENGE_STAGE(55),
    NEW_ACTIVITY_COND_TREASURE_SEELIE_FINISH_REGION(56),
    NEW_ACTIVITY_COND_FINISH_SEEK_PRESENT_STAGE(57),
    NEW_ACTIVITY_COND_FINISH_ROCK_BOARD_EXPLORE_STAGE(58),
    NEW_ACTIVITY_COND_VINTAGE_STORE_ROUND(59),
    NEW_ACTIVITY_COND_VINTAGE_MARKET_COIN_A(60),
    NEW_ACTIVITY_COND_VINTAGE_STORE_ROUND_SETTLE(61),
    NEW_ACTIVITY_COND_FUNGUS_FIGHTER_FINISH_CAMP (62),
    NEW_ACTIVITY_COND_EFFIGY_CHALLENGE_V2_FINISH_LEVEL_DIFFICULTY(63),
    NEW_ACTIVITY_COND_BRICK_BREAKER_STAGE_LEVEL_FINISH(64),
    NEW_ACTIVITY_COND_DUEL_HEART_FINISH_LEVEL(65),
    NEW_ACTIVITY_COND_ELECTROHERCULES_BATTLE_FINISH_ALL_STAGE(66),
    NEW_ACTIVITY_COND_FINISH_SEA_LAMP_V3_SHADOW_LEVEL(67),
    NEW_ACTIVITY_COND_FINISH_SEA_LAMP_V3_CAMP_STAGE(68),
    NEW_ACTIVITY_COND_FINISH_PACMAN_LEVEL(69),
    NEW_ACTIVITY_COND_FINISH_ANY_FUNGUS_FIGHTER_V2_LEVEL(70),
    NEW_ACTIVITY_COND_FINISH_FUNGUS_FIGHTER_V2_LEVEL(71),
    NEW_ACTIVITY_COND_FINISH_SANDWORM_CANNON_LEVEL(72),
    NEW_ACTIVITY_COND_AKA_FES_ARCHAEOLOGY_FINISH_ALL_STAGE(73),
    NEW_ACTIVITY_COND_FINISH_JOURNEY_GEAR_LEVEL(74),
    NEW_ACTIVITY_COND_PASS_SHUFFLE_BOARD_LEVEL(75),
    NEW_ACTIVITY_COND_PASS_TARGET_SHOOTING_LEVEL(76),
    NEW_ACTIVITY_COND_PASS_TOY_BATTLE_QTE_LEVEL(77),
    NEW_ACTIVITY_COND_FINISH_COLLECT_UNDERWATER_LEVEL(78),
    NEW_ACTIVITY_COND_PASS_PAINTING_REPAIR_STAGE(79),
    NEW_ACTIVITY_COND_FINISH_PITCH_POT_LEVEL(80),
    NEW_ACTIVITY_COND_FINISH_FISHBLASTER_LEVEL(81),
    NEW_ACTIVITY_COND_PASS_PAINTING_REPAIR_LEVEL(82),
    NEW_ACTIVITY_COND_FINISH_RAINBOW_PRINCE_REPAIR_LEVEL(83),
    NEW_ACTIVITY_COND_FINISH_FUNGUS_FIGHTER_V3_LEVEL(84),
    NEW_ACTIVITY_COND_FINISH_FILMFEST_SNIPER_LEVEL(85),
    NEW_ACTIVITY_COND_FINISH_ALL_GOAL_CHALLENGE_STAGE(86),
    NEW_ACTIVITY_COND_TREASURE_HUNT_V4_FINISH_REGION(87),
    NEW_ACTIVITY_COND_ELECTROHERCULES_BATTLE_FINISH_ANY_LEVEL(88),
    NEW_ACTIVITY_COND_ELECTROHERCULES_BATTLE_PASS_LEVEL(89),
    NEW_ACTIVITY_COND_FINISH_LAN_V4_CARP_JUMP_LEVEL(90),
    NEW_ACTIVITY_COND_FINISH_COOK_GAME_LEVEL(91),
    NEW_ACTIVITY_COND_FINISH_LAN_V4_PUSH_BOX_LEVEL(92),
    NEW_ACTIVITY_COND_ENTERED_CATCAFE_CAT_LEVEL(93),
    NEW_ACTIVITY_COND_REACH_CATCAFE_CAT_FAVORS(94),
    NEW_ACTIVITY_COND_FINISH_ALL_AUTO_TIME_STOP_LEVEL(95),
    NEW_ACTIVITY_COND_SLIME_CANNON_SCORE_REACH(96),
    NEW_ACTIVITY_COND_FINISH_ALCHEMY_SIM_STAGE(97),
    NEW_ACTIVITY_COND_FINISH_ALCHEMY_SIM_FINAL_QUEST_REQUIRE(98),
    NEW_ACTIVITY_COND_FINISH_AUTO_TIME_STOP_LEVEL(99),
    NEW_ACTIVITY_COND_FINISH_CATCAFE_CAT_FEED(100),
    NEW_ACTIVITY_COND_FINISH_EFFIGY_CHALLENGE_V5_LEVEL(101),
    NEW_ACTIVITY_COND_GREAT_FESTIVAL_V2_UPGRADE(102),
    NEW_ACTIVITY_COND_FINISH_WATERGUN_LEVEL(103),
    NEW_ACTIVITY_COND_MONSTER_VS_MONSTER_FINISH_ANY_LEVEL(104),
    NEW_ACTIVITY_COND_MONSTER_VS_MONSTER_FINISH_LEVEL(105),
    NEW_ACTIVITY_COND_FINISH_BULLET_HELL_LEVEL(106),
    NEW_ACTIVITY_COND_GREAT_FESTIVAL_V2_UPGRADE_HAVE_REWARD(107),
    NEW_ACTIVITY_COND_FINISH_BIRD_BALL_SINGLE_LEVEL(108),
    NEW_ACTIVITY_COND_FINISH_BOMBER_DODOCO_LEVEL(109),
    NEW_ACTIVITY_COND_FINISH_FAIRY_TALES_CURRENT_LEVEL(110),
    NEW_ACTIVITY_COND_FINISH_FLOAT_TOY_LEVEL(111),
    NEW_ACTIVITY_COND_FINISH_BOLTBUG_ABYSS_LEVEL(112),
    NEW_ACTIVITY_COND_FINISH_CEREMONY_DOODLE_LEVEL(113),
    NEW_ACTIVITY_COND_ELECTROHERCULES_BATTLE_V3_FINISH_ANY_LEVEL(114),
    NEW_ACTIVITY_COND_LAN_V5_PUZZLE_FIGHTER_FINISH_LEVEL(115),
    NEW_ACTIVITY_COND_LAN_V5_CARD_FINISH_LEVEL(116),
    NEW_ACTIVITY_COND_SCORE_REACH(117),
    NEW_ACTIVITY_COND_FINISH_CEREMONY_GHOST_ALL_NORMAL_LEVEL(118),
    NEW_ACTIVITY_COND_FINISH_ANIMAL_VIEW_ALL_LEVEL(119),
    NEW_ACTIVITY_COND_LAN_V5_CARD_FINISH_WORLD_NPC(120),
    NEW_ACTIVITY_COND_LAN_V5_BADGET_BATTLE_FINISH_LEVEL(121),
    NEW_ACTIVITY_COND_LAN_V5_INTERACT_COUNT_REACH(122),
    NEW_ACTIVITY_COND_FINISH_ANECDOTE(123),
    NEW_ACTIVITY_COND_FINISH_AD_SHOOTING_LEVEL(124),
    NEW_ACTIVITY_COND_PARTY_FINISH_LEVEL(125),
    NEW_ACTIVITY_COND_FINISH_ACTIVITY_PLAY_LEVEL(126),
    NEW_ACTIVITY_COND_NOT_TAKE_ALL_WATCHER(127),
    NEW_ACTIVITY_COND_NOT_TAKE_ALL_SCORE_REWARD(128),
    NEW_ACTIVITY_COND_NOT_TAKE_REWARD_AVATAR(129),
    NEW_ACTIVITY_COND_MVM2_FINISH_PVE_LEVEL(130),
    NEW_ACTIVITY_COND_THEME_PARK_SIM_FINISH_STAGE(131),
    NEW_ACTIVITY_COND_THEME_PARK_SIM_BUSINESS_LEVEL_REACH(132),
    NEW_ACTIVITY_COND_SLIME_CANNON_FINISH_LEVEL(133),
    NEW_ACTIVITY_COND_UNKNOWN(9999);

    override fun getIntKey() = id
}